// -*- coding: utf-8 -*-
//-----------------------------------------------------------------------------
// file: $Id$
// auth: metagriffin <mg.npmjs@uberdev.org>
// date: 2013/01/19
// copy: (C) CopyLoose 2013 UberDev <hardcore@uberdev.org>, No Rights Reserved.
//-----------------------------------------------------------------------------

// TODO: implement all the functionality defined by:
//         https://npmjs.org/package/request
//       ...

//-----------------------------------------------------------------------------
function Request(options, cb)
{
  if ( ! options || ! options.url )
    throw new Components.Exception('"options.url" parameter missing',
                                   Components.results.NS_ERROR_ILLEGAL_VALUE);
  this.options  = options;
  this.callback = cb;
  return this;
}

//-----------------------------------------------------------------------------
Request.prototype.send = function() {
  // todo: this implementation uses XMLHttpRequest. should it be
  //       using Components.interfaces.nsIHttpChannel instead?...

  let self = this;
  let xhr  = Components.classes["@mozilla.org/xmlextras/xmlhttprequest;1"]
    .createInstance(Components.interfaces.nsIXMLHttpRequest);

  xhr.onload = function(event) {
    if ( event.target.readyState != 4 )
      return;
    let resp = event.target;
    resp.body = resp.responseText;
    resp.statusCode = resp.status;
    resp.headers = {};
    let headers = resp.getAllResponseHeaders().split('\n');
    for ( var idx=0 ; idx<headers.length ; idx++ )
    {
      var name = headers[idx].split(':')[0].trim();
      if ( name && name.length > 0 )
        resp.headers[name.toLowerCase()] = resp.getResponseHeader(name);
    }
    self.callback(null, resp, resp.body);
  };

  xhr.onerror = function(event) {
    self.callback(event);
  };

  xhr.open(self.options.method || 'GET', self.options.url, true);

  if ( self.options.headers )
  {
    for ( let header in self.options.headers )
      xhr.setRequestHeader(header, self.options.headers[header]);
  }

  xhr.send(self.options.body || null);
};

//-----------------------------------------------------------------------------
module.exports = function(options, cb) {
  // options:
  //   - url     : STRING
  //   - method  : STRING
  //   - headers : DICT
  //   - body    : STRING
  // callback(ERR, RESPONSE, BODY)
  let req = new Request(options, cb);
  return req.send();
}

//-----------------------------------------------------------------------------
// end of $Id$
//-----------------------------------------------------------------------------
