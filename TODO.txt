- currently, to make things work, external libraries *must* be
  amdefine-compatible... for example, underscore.js needs be wrapped with:

    if (typeof define !== 'function')
      var define = require('amdefine')(module);
    define([], function() {

      [===] content of original underscore.js [===]

      if ( typeof(root) != 'undefined' )
        return root._;
      return _;
    });

  it would be much better if i did not need to alter libraries...

- look into:
    - https://github.com/larrymyers/jasmine-reporters
    - http://rockycode.com/blog/phantomjs-meets-jasmine/

- rename adapter.name and remote.name to *.displayName to be more
  consistent with `store`...

- both client & server modes should ensure that incoming sessionID, messageID
  and commandIDs are correct.

- see how error nodes come back, and think about doing it the way that
  funambol does:
    <Status>
      <CmdID>7</CmdID>
      <MsgRef>3</MsgRef>
      <CmdRef>20</CmdRef>
      <Cmd>Sync</Cmd>
      <TargetRef>mail</TargetRef>
      <SourceRef>mail</SourceRef>
      <Data>506</Data>
      <Item>
        <Data>Error setting preliminary info: Error: Account information not found!</Data>
      </Item>
    </Status>

- when client is in paranoid devInfo mode (ie. context.config.trustDevInfo
  is false), then it executes a potentially unnecessary extra
  request/response phase to confirm that the devInfo has not changed... it
  *could* instead issue the put/get as well as the alert, *assuming* that
  no devInfo is going to change... but if it does, it can then react...

- not sure why, but when using sbt, funambol appears to be doing an extra
  *unrequested* devinfo put... perhaps because sbt is responding with a
  "Status" node for the *Result* node, not an explicit *Put*... that would
  be strange/unexpected mode for the protocol...

